// Code generated by "enumer -type=BundleSenderType -linecomment"; DO NOT EDIT.

package mev

import (
	"fmt"
	"strings"
)

const _BundleSenderTypeName = "BundleSenderTypeFlashbotBundleSenderTypeBeaverBundleSenderTypeRsyncBundleSenderTypeTitanBundleSenderTypeBloxrouteBundleSenderTypeAllBundleSenderTypeMevShareBundleSenderTypeBackrunPublicBundleSenderTypeMevBlockerBundleSenderTypeBlinkBundleSenderTypeMerkle"

var _BundleSenderTypeIndex = [...]uint8{0, 24, 46, 67, 88, 113, 132, 156, 185, 211, 232, 254}

const _BundleSenderTypeLowerName = "bundlesendertypeflashbotbundlesendertypebeaverbundlesendertypersyncbundlesendertypetitanbundlesendertypebloxroutebundlesendertypeallbundlesendertypemevsharebundlesendertypebackrunpublicbundlesendertypemevblockerbundlesendertypeblinkbundlesendertypemerkle"

func (i BundleSenderType) String() string {
	i -= 1
	if i < 0 || i >= BundleSenderType(len(_BundleSenderTypeIndex)-1) {
		return fmt.Sprintf("BundleSenderType(%d)", i+1)
	}
	return _BundleSenderTypeName[_BundleSenderTypeIndex[i]:_BundleSenderTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BundleSenderTypeNoOp() {
	var x [1]struct{}
	_ = x[BundleSenderTypeFlashbot-(1)]
	_ = x[BundleSenderTypeBeaver-(2)]
	_ = x[BundleSenderTypeRsync-(3)]
	_ = x[BundleSenderTypeTitan-(4)]
	_ = x[BundleSenderTypeBloxroute-(5)]
	_ = x[BundleSenderTypeAll-(6)]
	_ = x[BundleSenderTypeMevShare-(7)]
	_ = x[BundleSenderTypeBackrunPublic-(8)]
	_ = x[BundleSenderTypeMevBlocker-(9)]
	_ = x[BundleSenderTypeBlink-(10)]
	_ = x[BundleSenderTypeMerkle-(11)]
}

var _BundleSenderTypeValues = []BundleSenderType{BundleSenderTypeFlashbot, BundleSenderTypeBeaver, BundleSenderTypeRsync, BundleSenderTypeTitan, BundleSenderTypeBloxroute, BundleSenderTypeAll, BundleSenderTypeMevShare, BundleSenderTypeBackrunPublic, BundleSenderTypeMevBlocker, BundleSenderTypeBlink, BundleSenderTypeMerkle}

var _BundleSenderTypeNameToValueMap = map[string]BundleSenderType{
	_BundleSenderTypeName[0:24]:         BundleSenderTypeFlashbot,
	_BundleSenderTypeLowerName[0:24]:    BundleSenderTypeFlashbot,
	_BundleSenderTypeName[24:46]:        BundleSenderTypeBeaver,
	_BundleSenderTypeLowerName[24:46]:   BundleSenderTypeBeaver,
	_BundleSenderTypeName[46:67]:        BundleSenderTypeRsync,
	_BundleSenderTypeLowerName[46:67]:   BundleSenderTypeRsync,
	_BundleSenderTypeName[67:88]:        BundleSenderTypeTitan,
	_BundleSenderTypeLowerName[67:88]:   BundleSenderTypeTitan,
	_BundleSenderTypeName[88:113]:       BundleSenderTypeBloxroute,
	_BundleSenderTypeLowerName[88:113]:  BundleSenderTypeBloxroute,
	_BundleSenderTypeName[113:132]:      BundleSenderTypeAll,
	_BundleSenderTypeLowerName[113:132]: BundleSenderTypeAll,
	_BundleSenderTypeName[132:156]:      BundleSenderTypeMevShare,
	_BundleSenderTypeLowerName[132:156]: BundleSenderTypeMevShare,
	_BundleSenderTypeName[156:185]:      BundleSenderTypeBackrunPublic,
	_BundleSenderTypeLowerName[156:185]: BundleSenderTypeBackrunPublic,
	_BundleSenderTypeName[185:211]:      BundleSenderTypeMevBlocker,
	_BundleSenderTypeLowerName[185:211]: BundleSenderTypeMevBlocker,
	_BundleSenderTypeName[211:232]:      BundleSenderTypeBlink,
	_BundleSenderTypeLowerName[211:232]: BundleSenderTypeBlink,
	_BundleSenderTypeName[232:254]:      BundleSenderTypeMerkle,
	_BundleSenderTypeLowerName[232:254]: BundleSenderTypeMerkle,
}

var _BundleSenderTypeNames = []string{
	_BundleSenderTypeName[0:24],
	_BundleSenderTypeName[24:46],
	_BundleSenderTypeName[46:67],
	_BundleSenderTypeName[67:88],
	_BundleSenderTypeName[88:113],
	_BundleSenderTypeName[113:132],
	_BundleSenderTypeName[132:156],
	_BundleSenderTypeName[156:185],
	_BundleSenderTypeName[185:211],
	_BundleSenderTypeName[211:232],
	_BundleSenderTypeName[232:254],
}

// BundleSenderTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BundleSenderTypeString(s string) (BundleSenderType, error) {
	if val, ok := _BundleSenderTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BundleSenderTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BundleSenderType values", s)
}

// BundleSenderTypeValues returns all values of the enum
func BundleSenderTypeValues() []BundleSenderType {
	return _BundleSenderTypeValues
}

// BundleSenderTypeStrings returns a slice of all String values of the enum
func BundleSenderTypeStrings() []string {
	strs := make([]string, len(_BundleSenderTypeNames))
	copy(strs, _BundleSenderTypeNames)
	return strs
}

// IsABundleSenderType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BundleSenderType) IsABundleSenderType() bool {
	for _, v := range _BundleSenderTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
